apply plugin: 'idea-scala-facet'

version = '0.1-rc1'

def findPlay20(){
  def pathEnvName = ['PATH', 'Path'].find{ System.getenv()[it] != null }
  for(path in System.getenv()[pathEnvName].split(File.pathSeparator)){
    for(playExec in ['play.bat', 'play', 'play.sh']){
      if(new File(path, playExec).exists()){
        project.ext.playHome = path
        project.ext.playExec = new File(path, playExec)
        return
      }
    }
  }
  throw new RuntimeException("""'play' command was not found in PATH.
Make sure you have Play Framework 2.0 installed and in your path""")
}

findPlay20()

repositories{
  // Play framework manages its own dependencies in a local Ivy repo
  ivy{
    def repoDir = "${playHome}/repository/local/"
    url repoDir 
    ivyPattern "${repoDir}/[organisation]/[module]/[revision]/[type]s/[artifact].[ext]"
    artifactPattern "${repoDir}/[organisation]/[module]/[revision]/[type]s/[artifact].[ext]"
    layout 'pattern'
  }
  maven{
    url "https://raw.github.com/rodionmoiseev/c10n/master/c10n-mvn-repo/snapshots"
  }
}

configurations{
  //Configuration containing sbt generated .class files
  //This is needed for IDEs, because they cannot compile
  //play templates by themselves.
  playManaged

  //Libraries needed at compilation time but not to be
  //exported as part of the distribution
  provided.extendsFrom scalaApi
}

dependencies{
  // User defined libraries
  compile 'c10n:c10n-core:1.1-SNAPSHOT'
  compile 'commons-io:commons-io:2.4'
  compile 'org.apache.abdera:abdera-core:1.1.2'
  compile 'org.apache.abdera:abdera-parser:1.1.2'

  // Default Gradle Scala plugin settings below (see Scala plugin page for up-to-date info)

  // Libraries needed to run the scala tools
  scalaTools 'org.scala-lang:scala-compiler:2.9.1'
  scalaTools 'org.scala-lang:scala-library:2.9.1'

  // Libraries needed for scala api
  scalaApi 'org.scala-lang:scala-library:2.9.1'

  // Play 2.0 Framework public API
  provided group: 'play', name: 'play_2.9.1', version: '2.0.3', configuration: 'compile'

  //playManaged files('target/scala-2.9.1/classes_managed')
}

task showLibs << {
  configurations.compile.each { println it }
}

task copyPlayLibs(type: Copy){
  delete { 'lib' }
  from configurations.compile
  into 'lib'
}

task "playRun" (type: Exec, dependsOn: copyPlayLibs) { 
  commandLine playExec, 'run'
}

task "playCompile" (type: Exec, dependsOn: copyPlayLibs) { 
  commandLine playExec, 'compile'
}

task "playClean" (type: Exec) { 
  commandLine playExec, 'clean'
}

task "playStage" (type: Exec, dependsOn: copyPlayLibs) { 
  commandLine playExec, 'clean', 'compile', 'stage'
}

sourceSets.main{
  java.srcDir 'app'
  compileClasspath += configurations.provided
}

idea {
  module{
    sourceDirs += file('target/scala-2.9.1/src_managed')
    scopes.COMPILE.plus += configurations.playManaged
    scopes.PROVIDED.plus += configurations.provided
  }
}
